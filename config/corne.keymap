/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "balanced";
    tapping-term-ms = <180>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Return {
            bindings = <&kp RETURN>;
            key-positions = <22 21 20>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <22 21 20 19>;
        };

        del_word {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <37 40>;
        };

        backpage {
            bindings = <&kp LG(LEFT_BRACKET)>;
            key-positions = <14 15 16>;
        };

        forwardPage {
            bindings = <&kp LG(RIGHT_BRACKET)>;
            key-positions = <17 15 16>;
        };

        capsLock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <33 32 27 26>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <19 20 21>;
        };

        backTab {
            bindings = <&kp LS(TAB)>;
            key-positions = <18 19 20>;
        };

        HomeRowApp {
            bindings = <&kp LC(LA(LS(LG(F))))>;
            key-positions = <16 38>;
        };

        Dictation_bound_to_hyper_b {
            bindings = <&kp LS(LG(LC(LA(B))))>;
            key-positions = <13 14 15>;
        };

        LeaderKey {
            bindings = <&kp LS(LA(LG(RIGHT)))>;
            key-positions = <38 39>;
        };

        mousless {
            bindings = <&kp LA(LC(LS(LG(RIGHT))))>;
            key-positions = <39 19>;
        };

        W_forwardPage {
            bindings = <&kp LA(RIGHT_ARROW)>;
            key-positions = <4 3 5>;
        };

        W_backPage {
            bindings = <&kp LA(LEFT_ARROW)>;
            key-positions = <4 3 2>;
        };

        delLine {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <36 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE              &kp Q           &kp W             &kp E           &kp R               &kp T                           &kp Y                          &kp U                &kp I                &kp O                   &kp P               &kp MINUS
&mo 2                   &kp A           &kp S             &kp D           &kp F               &kp G                           &kp H                          &kp J                &kp K                &kp L                   &kp SEMI            &kp SQT
&kp LA(LG(LEFT_SHIFT))  &mt LEFT_GUI Z  &mt LEFT_SHIFT X  &mt LEFT_ALT C  &mt LEFT_CONTROL V  &mt LA(LC(LG(LEFT_SHIFT))) B    &mt RA(RC(RG(RIGHT_SHIFT))) N  &mt RIGHT_CONTROL M  &mt RIGHT_ALT COMMA  &mt RIGHT_SHIFT PERIOD  &mt LEFT_GUI SLASH  &kp RA(RG(RIGHT_SHIFT))
                                                          &lt 3 TAB       &kp LEFT_SHIFT      &mo 1                           &lt 4 SPACE                    &lt 2 BACKSPACE      &lt 5 DELETE
            >;
        };

        NAV {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LS(LC(LA(LG(B))))         &kp LA(LC(LG(RS(TILDE))))     &kp LC(LEFT_BRACKET)  &kp LC(RIGHT_BRACKET)  &kp LC(R)         &kp LC(X)                 &kp LS(TAB)    &kp PAGE_DOWN  &kp PAGE_UP  &kp TAB    &kp ESCAPE  &none
&kp LG(LC(LA(LS(NUMBER_4))))  &kp LS(LA(LC(LG(NUMBER_2))))  &kp LS(LC(Z))         &kp LC(Z)              &kp LC(C)         &kp LC(V)                 &kp LEFT       &kp DOWN       &kp UP       &kp RIGHT  &kp RET     &trans
&kp LA(LG(LEFT_SHIFT))        &kp LEFT_GUI                  &kp LEFT_SHIFT        &kp LEFT_ALT           &kp LEFT_CONTROL  &kp LA(LG(LC(LSHIFT)))    &kp HOME       &trans         &trans       &kp END    &trans      &trans
                                                                                  &none                  &trans            &none                     &kp BACKSPACE  &kp SPACE      &kp DELETE
            >;
        };

        NUM+MEDIA {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB                 &none         &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_BRIGHTNESS_INC          &none       &kp N7  &kp N8  &kp N9  &kp PLUS   &kp BACKSLASH
&tog 5                  &none         &kp K_PREV      &kp C_PLAY         &kp C_NEXT        &kp C_BRIGHTNESS_DEC          &kp PERIOD  &kp N4  &kp N5  &kp N6  &kp EQUAL  &kp ASTERISK
&kp LA(LG(LEFT_SHIFT))  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LEFT_ALT       &kp LEFT_CONTROL  &kp LA(LC(LG(LEFT_SHIFT)))    &kp N0      &kp N1  &kp N2  &kp N3  &kp MINUS  &kp FSLH
                                                      &kp BACKSPACE      &kp SPACE         &kp DEL                       &none       &none   &none
            >;
        };

        WIN {
            bindings = <
&none   &none   &none                  &none                  &none                   &none            &kp LS(LA(LG(GRAVE)))  &kp N1             &kp N2         &kp N3  &kp N4         &kp LA(LS(LG(P)))
&none   &none   &kp LS(LA(LG(MINUS)))  &kp LS(LA(LG(EQUAL)))  &kp LA(LS(LG(F)))       &kp LC(LG(F))    &kp H                  &kp J              &kp K          &kp L   &kp SEMICOLON  &kp SQT
&trans  &trans  &trans                 &kp LC(LG(LEFT_ALT))   &kp LA(LG(LEFT_SHIFT))  &none            &none                  &kp LA(LS(LG(F)))  &kp LC(LG(F))  &none   &none          &kp LA(LS(LG(R)))
                                       &none                  &none                   &none            &none                  &none              &none
            >;
        };

        SYM {
            bindings = <
&none   &none         &none           &none          &none             &none      &kp POUND  &kp PERCENT            &kp EXCLAMATION  &kp TILDE          &kp PIPE    &none
&none   &none         &none           &none          &none             &none      &kp GRAVE  &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp DOLLAR  &kp AMPERSAND
&trans  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LEFT_ALT   &kp LEFT_CONTROL  &trans     &kp CARET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp AT      &none
                                      &kp BACKSPACE  &kp SPACE         &kp DEL    &none      &none                  &none
            >;
        };

        SYSTEM+FN {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3      &none    &none        &kp F7  &kp F8  &kp F9  &kp F10  &kp F13
&out OUT_BLE  &none         &none           &none         &none             &none    &none        &kp F4  &kp F5  &kp F6  &kp F11  &kp F14
&sys_reset    &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_CONTROL  &none    &bootloader  &kp F1  &kp F2  &kp F3  &kp F12  &kp F15
                                            &none         &none             &none    &none        &none   &none
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
